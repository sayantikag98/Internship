# -*- coding: utf-8 -*-
"""Intern_data_11_05_20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BMVQX3akk3Nlwax2p0wegDj0hYxT1Krq
"""

# Importing the various libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
import os
import datetime as dt
import random
import itertools

df = pd.DataFrame(columns = ['part_cycle_time','part_ID','program_number','part_count','quality','running_tool_number','tool_changed','spindle_load_%','spindle_speed','current','spindle_temp','feed','vibration_X','vibration_Z','vibration_spindle','noise','flow_rate','cutting_speed','depth_of_cut','diameter','tolerance','material'])

# to calculate the number of rows of the time series dataframe
np.random.seed(1)
n=1000
ran=np.random.randint(60,1800,n)
ra=list(ran)

row=ran.sum()

# to make a column in the dataframe for time stamp
df['part_cycle_time']=pd.to_timedelta(np.arange(row), unit='s')

# removing the date component from part_cycle_time column
df['part_cycle_time']=df['part_cycle_time']-pd.to_timedelta(df['part_cycle_time'].dt.days,unit='d')

# to generate 1000 evenly spaced numbers between 100 and 1100
b=np.linspace(101,n+100,n,dtype="int")

# to make the part_count and part_ID column 
c=list(ran)
lis=[]
lis1=[]
for i in range(len(list(ran))):
    lis.append(np.repeat(b[i],c[i]))
    lis1.append(np.repeat((b[i]-100),c[i]))
df['part_count']=list(itertools.chain.from_iterable(lis))
df['part_ID']=list(itertools.chain.from_iterable(lis1))

# to generate the program_number column
ser=list(np.linspace(101,1051,20,dtype=int))
val=list(np.linspace(1000,1950,20,dtype=int))
for i in range(len(ser)):
    df.loc[((df['part_count']>=(ser[i]))&(df['part_count']<=(ser[i]+49))),'program_number']=val[i]

df['program_number']=df['program_number'].astype('Int64')

# to generate a list containing 0.4% REJECTIONS among 1000 parts
l=[np.repeat("ACCEPTED",996)]
l.append(np.repeat("REJECTED",4))
l1=list(itertools.chain.from_iterable(l))
np.random.seed(1)
q=random.sample(l1,len(l1))

# to generate the cumulative frequency
cf=list((ran.cumsum())-1)
for i in range(len(cf)):
    df.iloc[cf[i],4]=q[i]
    df.iloc[cf[i],20]=0.1

# To generate the lists containing the tool number and frequency of tool change
np.random.seed(1)
list1=[n for n in range(1,17)]
list2=[140,136,138,129,132,110,143,133,132,129,145,143,145,137,142,133]
list3=[]
np.random.seed(1)
for i in range(len(list1)):
    list3.append(np.repeat(list1[i],list2[i]))
list4=list(itertools.chain.from_iterable(list3))
np.random.seed(1)

random.shuffle(list4)

# to generate a list for storing the time of change of tool once
np.random.seed(1)
list5=list(np.random.randint(5,872,2214))
list6=[]
for i in range(len(list4)):
    list6.append(np.repeat(list4[i],list5[i]))
    
list6=list(itertools.chain.from_iterable(list6))
del list6[939284:939589]

# to generate the columns for running_tool_number and tool_changed
for i in range(len(df)-1):
    if(list6[i]!=list6[i+1]):
        df.loc[i,'tool_changed']=list6[i+1]
        list6[i]=np.nan
        
df['running_tool_number']=list6
df['running_tool_number']=df['running_tool_number'].astype('Int64')
df['tool_changed']=df['tool_changed'].astype('Int64')

# to generate the column for material
df['material']="MILD_STEEL"

list40=[]
for i in range(len(df)):
    if(i<=((len(df))/2)):
        list40.append(80)
    else:
        list40.append(85)

list41=random.sample(list40,len(list40))
df['diameter']=list41

# to generate the list of numbers storing the linear step up and linear step down

def number(r,n):
    num = []
    np.random.seed(1)
    for i in r:
        if i == 0: 
            num.append([0 for i in range(n)])
            continue
        total = i
        temp = []
        for i in range(n-1):
            val = np.random.randint(0, total)
            temp.append(val)
            total -= val
        temp.append(total)
        num1=num.append(temp)
    return (num)

# to generate the column for spindle load change in %
ran1=list(ran)
num=number(ran1,5)
num1=number(ran1,7)
num2=number(ran1,4)
num3=number(ran1,6)
num4=number(ran1,8)


list15=[]
list16=[]
list17=[]
list18=[]
list19=[]
list20=[]
list21=[]
list22=[]
list23=[]
list24=[]
list25=[]
list26=[]
list27=[]
list28=[]
list29=[]
list30=[]
list31=[]
list32=[]
list33=[]
list34=[]

for i in range(len(num)):
    list15.append([np.linspace(0,50,num[i][0]),np.linspace(50,80,num[i][1]),np.repeat(120,num[i][2]),np.linspace(90,50,num[i][3]),np.linspace(50,0,num[i][4])])
    list16.append(list(itertools.chain.from_iterable(list15[i])))
    list17.append([np.linspace(0,400,num4[i][0]),np.linspace(400,1000,num4[i][1]),np.linspace(1000,6000,num4[i][2]),np.linspace(6000,9950,num4[i][3]),np.repeat(10000,num4[i][4]),np.linspace(9000,5000,num4[i][5]),np.linspace(5000,1000,num4[i][6]),np.linspace(1000,0,num4[i][7])])
    list18.append(list(itertools.chain.from_iterable(list17[i])))
    list19.append([np.linspace(0,20,num[i][0]),np.linspace(20,70,num[i][1]),np.linspace(70,80,num[i][2]),np.linspace(80,30,num[i][3]),np.linspace(30,0,num[i][4])])
    list20.append(list(itertools.chain.from_iterable(list19[i])))
    list21.append([np.linspace(20,40,num2[i][0]),np.linspace(40,55,num2[i][1]),np.linspace(55,30,num2[i][2]),np.linspace(30,0,num2[i][3])])
    list22.append(list(itertools.chain.from_iterable(list21[i])))
    list23.append([np.linspace(0,0.15,num[i][0]),np.linspace(0.15,0.30,num[i][1]),np.linspace(0.30,0.40,num[i][2]),np.linspace(0.40,0.20,num[i][3]),np.linspace(0.20,0,num[i][4])])
    list24.append(list(itertools.chain.from_iterable(list23[i])))
    list25.append([np.linspace(0,1,num2[i][0]),np.linspace(1,6,num2[i][1]),np.linspace(6,2,num2[i][2]),np.linspace(2,0,num2[i][3])])
    list26.append(list(itertools.chain.from_iterable(list25[i])))
    list27.append([np.linspace(0,1,num[i][0]),np.linspace(1,2,num[i][1]),np.linspace(2,6,num[i][2]),np.linspace(6,3,num[i][3]),np.linspace(6,3,num[i][4])])
    list28.append(list(itertools.chain.from_iterable(list27[i])))
    list29.append([np.linspace(0,3,num2[i][0]),np.linspace(3,6,num2[i][1]),np.linspace(6,2,num2[i][2]),np.linspace(2,0,num2[i][3])])
    list30.append(list(itertools.chain.from_iterable(list29[i])))
    list31.append([np.linspace(0,5,num3[i][0]),np.linspace(5,20,num3[i][1]),np.linspace(20,90,num3[i][2]),np.linspace(90,100,num3[i][3]),np.linspace(100,10,num3[i][4]),np.linspace(10,0,num3[i][5])])
    list32.append(list(itertools.chain.from_iterable(list31[i])))
    list33.append([np.repeat(0,num1[i][0]),np.repeat(20,num1[i][1]),np.repeat(25,num1[i][2]),np.repeat(25,num1[i][3]),np.repeat(25,num1[i][4]),np.repeat(20,num1[i][5]),np.repeat(0,num1[i][6])])
    list34.append(list(itertools.chain.from_iterable(list33[i])))
    
    
for i in range(len(num)):
    df.loc[df['part_ID']==(i+1),'spindle_load_%']=list16[i]
    df.loc[df['part_ID']==(i+1),'spindle_speed']=list18[i]
    df.loc[df['part_ID']==(i+1),'current']=list20[i]
    df.loc[df['part_ID']==(i+1),'spindle_temp']=list22[i]
    df.loc[df['part_ID']==(i+1),'feed']=list24[i]
    df.loc[df['part_ID']==(i+1),'vibration_X']=list26[i]
    df.loc[df['part_ID']==(i+1),'vibration_Z']=list28[i]
    df.loc[df['part_ID']==(i+1),'vibration_spindle']=list30[i]
    df.loc[df['part_ID']==(i+1),'noise']=list32[i]
    df.loc[df['part_ID']==(i+1),'flow_rate']=list34[i]



df

le=len(df.loc[(df['spindle_speed']!=10000)])
list36=list(np.linspace(0.6,0.7,1000))
list37=random.sample(list36,len(list36))
list38=list(np.linspace(0,1,le))
list39=random.sample(list38,len(list38))

for i in range(len(num)):
    df.loc[((df['part_ID']==(i+1))&(df['spindle_speed']==10000)),'depth_of_cut']=list37[i]


df.loc[(df['spindle_speed']!=10000),'depth_of_cut']=list39

le1=len(df[df['spindle_speed']==10000])
list35=list(np.random.randint(0,270,le1))
list35

df.loc[(df['spindle_speed']==10000),'cutting_speed']=list35

df

